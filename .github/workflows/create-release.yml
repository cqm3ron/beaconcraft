name: Create Release

on:
  push:
    paths:
      - 'BCX Assets/**'
    branches:
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install zip
        run: sudo apt-get install zip

      - name: Zip directory
        run: zip -r BCX_Assets.zip 'BCX Assets/'


      - name: Get latest release
        id: get_latest_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const response = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const latestRelease = response.data[0];
            const latestTag = latestRelease ? latestRelease.tag_name : 'v1.0';
            console.log('Latest Tag:', latestTag);

            let newTag;
            if (latestTag) {
                const versionParts = latestTag.replace('v', '').split('.');
                const major = parseInt(versionParts[0]);
                const minor = parseInt(versionParts[1]);
                const newMinor = minor + 1;
                newTag = `v${major}.${newMinor.toFixed(1)}`;
            } else {
                newTag = 'v1.0';
            }
            console.log('New Tag:', newTag);

            const releaseBody = latestRelease ? latestRelease.body : 'Initial Release';
            core.setOutput('new_tag', newTag);
            core.setOutput('release_body', releaseBody);

      - name: Create Release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const fs = require('fs');
            const releaseName = 'New Release';
            const releaseBody = '${{ steps.get_latest_release.outputs.release_body }}';
            const newTag = '${{ steps.get_latest_release.outputs.new_tag }}';

            console.log('Release Body:', releaseBody);
            console.log('New Tag:', newTag);

            const response = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: newTag,
              name: releaseName,
              body: releaseBody
            });

            const uploadUrl = response.data.upload_url;
            const releaseId = response.data.id;

            // Upload the release asset
            const zipFilePath = 'BCX_Assets.zip'; // Update the path here
            console.log('Zip File Path:', zipFilePath);
            const zipFileData = fs.readFileSync(zipFilePath);
            console.log('Zip File Size:', zipFileData.length);
            const base64ZipFileData = zipFileData.toString('base64');
            await github.repos.uploadReleaseAsset({
              url: uploadUrl,
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: 'BCX_Assets.zip',
              data: base64ZipFileData
            });
